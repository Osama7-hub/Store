"use client"
import { useEffect, useState } from "react";
import localFont from "next/font/local";
import "./globals.css";
import Header from "./components/navbar/Header";
import Footer from "./components/Footer/Footer";
import { CartContext } from "./_context/CartContext";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

// export const metadata = {
//   title: "Store",
//   description: "Generated by create next app",
// };

export default function RootLayout({ children }) {
  const [cart, setCart] = useState([]);
  const [isLoaded, setIsLoaded] = useState(false); // حالة لتحميل البيانات

  // تحميل البيانات من LocalStorage عند التهيئة
  // useEffect(() => {
  //   const savedCart = localStorage.getItem("cart");

  //   if (savedCart) {
  //     try {
  //       const parsedCart = JSON.parse(savedCart);
  //       setCart(parsedCart);
  //     } catch (error) {
  //       console.error("Error parsing cart data:", error);
  //       localStorage.removeItem("cart"); // تنظيف البيانات غير الصحيحة
  //     }
  //   }
  // }, []);

  useEffect(() => {
    const savedCart = localStorage.getItem('cart');
    if (savedCart) {
        try {
            const parsedCart = JSON.parse(savedCart);
            if (Array.isArray(parsedCart)) {
                setCart(parsedCart); // تحميل البيانات بنجاح
            }
        } catch (error) {
            console.error('Error parsing cart data:', error);
            localStorage.removeItem('cart'); // تنظيف البيانات غير الصحيحة
        }
    }
    setIsLoaded(true); // تأكيد أن البيانات تم تحميلها
}, []);

    // تحديث LocalStorage عند تغيير السلة
    useEffect(() => {
      if (isLoaded) {
          localStorage.setItem('cart', JSON.stringify(cart));
      }
  }, [cart, isLoaded]);

  const addToCart = (product) => {
    // setCart((prevCart) => [...prevCart, product]);
    console.log("Adding to cart:", product);
    setCart(oldCart => [...oldCart, product])
  }

  // إزالة منتج من السلة
  const removeFromCart = (productId) => {
    setCart((prevCart) => prevCart.filter((item) => item.id !== productId));
  };

  const totalPrice = cart.reduce((total, item) => total + item.price, 0);

  return (
    <CartContext.Provider value={{ cart, addToCart, removeFromCart, totalPrice, }}>
      <html lang="en" suppressHydrationWarning={true}>
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
          <Header />
          {children}
          <Footer />
        </body>
      </html>
    </CartContext.Provider>
  );
}
